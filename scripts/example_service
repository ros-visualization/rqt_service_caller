#!/usr/bin/env python3

# Copyright 2018 PickNik Robotics LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Author: Michael Lautman

import math

import rclpy

from rclpy.node import Node

from rqt_service_caller.srv import Distance


class DistanceServer(Node):

    def __init__(self):
        super().__init__('add_two_ints_server')
        self.srv = self.create_service(Distance, 'Distance', self.distance_callback)

    def distance_callback(self, request, response):
        response.distance = math.sqrt(
            math.pow(request.point1.x - request.point2.x, 2) +
            math.pow(request.point1.y - request.point2.y, 2) +
            math.pow(request.point1.z - request.point2.z, 2))
        self.get_logger().info(
            'Incoming request\n '
            '\tpoint1.x: %3.f \tpoint2.x: %3.f\n'
            '\tpoint1.y: %3.f \tpoint2.y: %3.f\n'
            '\tpoint1.z: %3.f \tpoint2.z: %3.f\n'
            % (
                request.point1.x, request.point2.x,
                request.point1.y, request.point2.y,
                request.point1.z, request.point2.z))

        return response


def main(args=None):
    rclpy.init(args=args)

    node = DistanceServer()

    rclpy.spin(node)

    # Destroy the node explicitly
    # (optional - Done automatically when node is garbage collected)
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
